generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- auth ----- //

model User {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  role          UserRole @default(CUSTOMER)

  sessions Session[]
  accounts Account[]
  customer Customer?

  @@map("users")
}

model Session {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime

  accountId  String
  providerId String

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

enum UserRole {
  ADMIN
  DESIGNER
  MARKETER
  CUSTOMER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// -----  entities ----- //

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  slug        String  @unique
  description String?
  imageUrl    String?
  parentId    String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0) 

  products Product[]

  @@map("categories")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name_en              String
  name_ar              String
  slug                 String  @unique
  description_en       String?
  description_ar       String?
  short_description_en String?
  short_description_ar String?
  brief_title_en       String?
  brief_title_ar       String?
  brief_text_en        String?
  brief_text_ar        String?
  warnings_en          String[] // JSON array stored as string array
  warnings_ar          String[] // JSON array stored as string array
  benefits_en          String[] // JSON array stored as string array
  benefits_ar          String[] // JSON array stored as string array
  ingredients_en       String[] // JSON array stored as string array
  ingredients_ar       String[] // JSON array stored as string array
  baseSku              String
  basePrice            Float
  imageUrl             String?
  isActive             Boolean @default(true)
  isFeatured           Boolean @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  variants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  sku               String  @unique
  variant_name_en   String
  variant_name_ar   String
  weight_volume     Float
  unit              String
  price             Float
  compare_at_price  Float?
  barcode           String?

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Customer {
  customerId   Int      @id @default(autoincrement()) @map("customer_id")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String   @unique @map("user_id")
  dateOfBirth  DateTime? @map("date_of_birth")
  gender       Gender?
  lastLogin    DateTime? @map("last_login")
  totalOrders  Int      @default(0) @map("total_orders")
  totalSpent   Float    @default(0) @map("total_spent")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}
